import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Collections.bs"
import "pkg:/source/core/Utils.bs"

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Public Fields
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'indicates the last change that occurred
'will be of order:
'{type:"add",  child:child, index:index}
'{type:"remove" child:child, index:index}
'{type:"insert" child:child, index:index}
'{type:"replace" child:child, index:index, child:oldValue}
'{type:"append"}, children:[]]
'{type:"clear"}

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Initialization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function init()
  m.log = new log.Logger("mc_Node")
  m.notifyChanges = true
  m.pendingChanges = []
  m.children = []
  m.findNodeById = ""
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Public Methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function setField(name as string, value as dynamic)
  m.top.setField(name, value)
  m.top.version++
end function

function getChildren(count = -1 as integer, start = 0 as integer)
  return m.children
end function

function getChild(index as integer)
  return m.children[index]
end function

function sortByKey(keyName as string, ascending = true as boolean)
  m.children = mc.collections.getSortedArrayByKey(m.children, keyName, ascending)
  m.top.length = m.children.count()
  addChanges([{ type: "sort" }])
end function

function sortByCallFunc(functionName as string, ascending = true as boolean)
  m.children = mc.collections.getSortedArrayByCallFunc(m.children, functionName, ascending)
  m.top.length = m.children.count()
  addChanges([{ type: "sort" }])
end function

function clear(args = invalid as dynamic)
  m.children = []
  m.top.length = 0
  addChanges([{ type: "clear" }])
end function

function peek(args = invalid as dynamic) as dynamic
  return m.children[m.children.count() - 1]
end function

function appendChild(child as object) as void
  if type(child) <> "roSGNode"
    m.log.error("tried to insert non-node child")
    return
  end if
  'TODO - parent tracking?
  notifyParentOfRemoval(child)
  m.children.push(child)
  m.top.length = m.children.count()
  addChanges([{ type: "add", child: child, index: m.children.count() }])
end function

function replaceChild(child as object, index as integer) as void
  if type(child) <> "roSGNode"
    m.log.error("tried to replace non-node child")
    return
  end if
  oldValue = m.children[index]
  m.children[index] = child
  addChanges([{ type: "change", child: child, index: index, oldValue: oldValue }])
end function

function notifyParentOfRemoval(child as object)
  'TODO - think about what this means.
  ' if child <> invalid
  '   oldParent = child.getParent()
  '   if oldParent <> invalid and oldParent.isSubtype("mc_Node") and not m.top.isSameNode(oldParent)
  '     oldParent@.removeChild(child)
  '   end if
  ' end if
end function

function insertChild(child as object, index as integer) as void
  if type(child) <> "roSGNode"
    m.log.error("tried to insert non-node child")
    return
  end if
  notifyParentOfRemoval(child)

  insertChildren([child], index)
end function

function insertChildren(children as mc.types.array, index as integer) as void

  if type(children) = "roSGNode"
    children = [children]
  end if

  if not mc.isArray(children)
    children = [children]
  end if

  for each child in children
    notifyParentOfRemoval(child)
    if type(child) <> "roSGNode"
      m.log.error("tried to insert at least one non-node child")
      return
    end if
  end for
  insertItems(index, children)
end function

function removeChildIndex(index as integer)
  removeChildrenIndex(1, index)
end function

function appendChildren(children as mc.types.array) as void
  if type(children) = "roSGNode"
    children = [children]
  end if

  if not mc.isArray(children)
    children = [children]
  end if

  for each child in children
    notifyParentOfRemoval(child)
    if type(child) <> "roSGNode"
      m.log.error("tried to append at least one non-node child")
      return
    end if
  end for
  m.children.append(children)
  m.top.length = m.children.count()
  addChanges([{ type: "append", children: children, index: m.children.count() - 1 }])
end function

function removeChildrenIndex(numberOfItems as integer, index as integer)
  if index > -1 and index + numberOfItems <= m.children.count()
    changes = []
    for i = index + numberOfItems - 1 to index step -1
      child = m.children[i]
      changes.push({ type: "remove", child: child, index: i })
      m.children.delete(index)
    end for

    m.top.length = m.children.count()
    addChanges(changes)
  end if
end function

function removeChildren(children as mc.types.array)
  for each child in children
    removeChild(child)
  end for
end function

function removeChild(child as mc.types.array)
  index = getIndex(child, "id")
  if index <> -1
    removeChildrenIndex(1, index)
  else
    m.log.error("cannot remove: child not found")
  end if
end function

function hasItem(child as object, key = invalid as string)
  return getIndex(child) <> -1
end function

function getIndex(child as object, key = invalid as string)
  return mc.collections.getArrayIndex(m.children, child, key)
end function

function insertItems(index as integer, value as dynamic) as void
  if type(value) = "roSGNode"
    value = [value]
  end if

  if not mc.isArray(value)
    value = [value]
  end if

  for each child in value
    if type(child) <> "roSGNode"
      m.log.error("tried to insert at least one non-node child")
      return
    end if
  end for

  if index > m.children.count() or index < 0
    ? " cannot insert items ILLEGAL INDEX " ; index
    return
  end if
  items = []

  for i = 0 to index - 1
    items.push(m.children[i])
  end for

  items.append(value)

  for i = index to m.children.count() - 1
    items.push(m.children[i])
  end for
  m.children = items

  m.top.length = m.children.count()

  addChanges([{ type: "insert", items: value, index: index }])
end function

function createChild(nodeType as string, id = "" as string)
  id = id = "" ? rnd(2147483647).toStr() : id
  child = mc.createSGNode(nodeType, invalid, id)
  if child <> invalid
    appendChild(child)
  end if
  return child
end function

function createChildren(numChildren as integer, subtype as string)
  children = []
  for i = 0 to numChildren - 1
    child = createChild(subtype)
    if child <> invalid
      children.push(child)
    end if
  end for
  return children
end function

function getChildCount(args = invalid as dynamic) as integer
  return m.top.length
end function

function findNode(id as string)
  m.findNodeById = id
  'bs:disable-next-line
  return mc.collections.find(m.children, function(child): return child.id = m.findNodeById: end function)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Changes
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function notifyUpdate(args = invalid as dynamic)
  wasNotifying = m.notifyChanges
  setNotificationsEnabled(true, true)
  if not wasNotifying
    setNotificationsEnabled(false)
  end if
end function

function resetChanges(resetAll = true as boolean)
  m.pendingChanges = []
  if resetAll = true
    m.top.changes = []
  end if
end function

function addChanges(changes as mc.types.array)
  if m.notifyChanges
    m.top.changes = changes
    m.top.version++
  else
    m.pendingChanges.append(changes)
  end if
end function

function setNotificationsEnabled(active as boolean, sendUpdatedChange = false as boolean)
  m.notifyChanges = active
  if active
    ' ? " NOTIFICATION REENABLED "
    if sendUpdatedChange
      ' ? "setting general update change"
      m.top.changes = [{ type: "updated" }]
    else
      ' ? "setting changes to pending"
      mc.collections.forEach(m.pendingChanges, function(c as object): print c: end function)
      m.top.changes = m.pendingChanges
    end if
    m.pendingChanges = []
    m.top.version++
  end if
end function

function _onShowChildren()
  mc.setOrAddNodeField(m.top, "__items", m.children)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Serialization support
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function serialize() as mc.types.assocarray
  if m.serialize <> invalid
    return m.serialize()
  end if
  return {}
end function

function deserialize(data as mc.types.assocarray)
  if m.deserialize <> invalid
    m.deserialize(data)
  end if
end function
