import "pkg:/source/tests/BaseTestSuite.spec.bs"

namespace tests
  @only
  @suite("mc_Node tests")
  class mc_Node extends tests.BaseTestSuite

    private node
    protected override function beforeEach()
      super.beforeEach()
      m.node = mc.createSGNode("mc_Node")
      label = mc.createSGNode("Label", invalid, "label")
      poster = mc.createSGNode("Poster", invalid, "poster")
      group = mc.createSGNode("Group", invalid, "group")

      m.node@.appendChildren([label, poster, group])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("setField")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("sets existing field on node")
    function _()
      m.node.version = 0
      m.node@.setField("length", 1)

      m.assertEqual(m.node.length, 1)
      m.assertEqual(m.node.version, 1)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getChildren")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets the children of the node")
    function _()
      children = m.node@.getChildren()

      m.assertEqual(children[0].id, "label")
      m.assertEqual(children[1].id, "poster")
      m.assertEqual(children[2].id, "group")
      m.assertEqual(children.count(), 3)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getChild")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns child at specified index")
    @params(0, "roSGNode")
    @params(1, "roSGNode")
    @params(2, "roSGNode")
    @params(3, "roInvalid")
    function _(index, expectedNodeType)
      child = m.node@.getChild(index)

      m.assertEqual(type(child), expectedNodeType)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("sortByKey")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("sorts node children by key")
    function _()
      m.node@.sortByKey("id")

      children = m.node@.getChildren()

      m.assertEqual(m.node.length, 3)
      m.assertEqual(children[0].id, "group")
      m.assertEqual(children[1].id, "label")
      m.assertEqual(children[2].id, "poster")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("clear")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("clears the node children")
    function _()
      m.node@.clear()

      children = m.node@.getChildren()

      m.assertEqual(m.node.length, 0)
      m.assertEqual(children, [])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("peek")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns the last child of the node")
    function _()
      child = m.node@.peek()
      m.assertEqual(child.id, "group")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("appendChild")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't append child if it's not a roSGNode")
    function _()
      m.node@.clear()

      child = { "id": "child" }
      m.node@.appendChild(child)

      m.assertEqual(m.node.length, 0)
      m.assertEqual(m.node@.getChildren(), [])
    end function

    @it("appends child to the node if it's a roSGNode")
    function _()
      m.node@.clear()

      child = mc.createSGNode("Label", invalid, "addedLabel")
      m.node@.appendChild(child)

      m.assertEqual(m.node.length, 1)
      m.assertEqual(m.node@.getChildren(), [child])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("replaceChild")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't replace child if not a roSGNode")
    function _()
      child = { "id": "child" }
      m.node@.replaceChild(child, 0)

      child = m.node@.getChild(0)
      m.assertEqual(child.id, "label")
    end function

    @it("replaces child")
    function _()
      rectangle = mc.createSGNode("Rectangle", invalid, "rectangle")
      m.node@.replaceChild(rectangle, 0)

      child = m.node@.getChild(0)
      m.assertEqual(child.id, "rectangle")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("insertChild")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't insert child if not a roSGNode")
    function _()
      child = { "id": "child" }
      m.node@.insertChild(child, 0)

      child = m.node@.getChild(0)
      m.assertEqual(child.id, "label")
    end function

    @it("inserts child at specified position")
    function _()
      rectangle = mc.createSGNode("Rectangle", invalid, "rectangle")
      m.node@.insertChild(rectangle, 0)

      m.assertEqual(m.node@.getChild(0).id, "rectangle")
      m.assertEqual(m.node@.getChild(1).id, "label")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("insertChildren")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't insert children that are not roSGNode")
    function _()
      child = invalid
      m.node@.insertChildren(child, 0)

      m.assertEqual(m.node.length, 3)
      m.assertEqual(m.node@.getChild(0).id, "label")
    end function

    @it("doesn't crash if children are not array and insert roSGNode children")
    function _()
      rectangle = mc.createSGNode("Rectangle", invalid, "rectangle")

      m.node@.insertChildren(rectangle, 0)

      m.assertEqual(m.node.length, 4)
      m.assertEqual(m.node@.getChild(0).id, "rectangle")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("removeChildIndex")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't crash if index is not found")
    function _()
      m.node@.removeChildIndex(10)
      m.assertEqual(m.node.length, 3)
    end function

    @it("removes child at index")
    function _()
      child = m.node@.getChild(m.node.length - 1)
      m.assertEqual(child.id, "group")

      m.node@.removeChildIndex(2)

      child = m.node@.getChild(m.node.length - 1)

      m.assertEqual(m.node.length, 2)
      m.assertEqual(child.id, "poster")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("appendChildren")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't append children that are not roSGNode")
    function _()
      child = invalid
      m.node@.appendChildren(child, 0)

      m.assertEqual(m.node.length, 3)
      m.assertEqual(m.node@.getChild(0).id, "label")
    end function

    @it("doesn't crash if children are not array and appends roSGNode children")
    function _()
      rectangle = mc.createSGNode("Rectangle", invalid, "rectangle")

      m.node@.appendChildren(rectangle)

      m.assertEqual(m.node.length, 4)
      m.assertEqual(m.node@.getChild(m.node.length - 1).id, "rectangle")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("removeChildrenIndex")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't remove children if index + num children to be removed is bigger than the node's children")
    @params(10, 1)
    @params(1, 10)
    @params(3, 2)
    @params(1, -1)
    function _(numberOfItems, index)
      m.node@.removeChildrenIndex(numberOfItems, index)
      m.assertEqual(m.node.length, 3)
    end function

    @it("removes a number of children from a specified index")
    @params(2, 0, 1)
    @params(1, 0, 2)
    @params(1, 2, 2)
    function _(numberOfItems, index, expectedLength)
      m.node@.removeChildrenIndex(numberOfItems, index)
      m.assertEqual(m.node.length, expectedLength)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("removeChildren")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't remove children if passed children ids are not found in node's children")
    function _()
      label = { "id": "label2" }
      poster = { "id": "poster2" }

      m.node@.removeChildren([label, poster])

      m.assertEqual(m.node.length, 3)
      m.assertEqual(m.node@.getChild(0).id, "label")
      m.assertEqual(m.node@.getChild(1).id, "poster")
      m.assertEqual(m.node@.getChild(2).id, "group")
    end function

    @it("removes node children by matched children ids")
    function _()
      children = [{ id: "label" }, { id: "poster" }]
      m.node@.removeChildren(children)

      m.assertEqual(m.node.length, 1)
      m.assertEqual(m.node@.getChildren(), [m.node@.getChild(m.node.length - 1)])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("removeChild")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't remove child if child id is not found in node's children")
    function _()
      label = { "id": "label2" }

      m.node@.removeChild(label)

      m.assertEqual(m.node.length, 3)
      m.assertEqual(m.node@.getChild(0).id, "label")
      m.assertEqual(m.node@.getChild(1).id, "poster")
      m.assertEqual(m.node@.getChild(2).id, "group")
    end function

    @it("removes child")
    function _()
      m.node@.removeChild({ id: "label" })

      m.assertEqual(m.node.length, 2)
      m.assertEqual(m.node@.getChild(0).id, "poster")
      m.assertEqual(m.node@.getChild(1).id, "group")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("hasItem")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("check if node has a specific child")
    @params({ id: "label" }, true)
    @params({ id: "poster" }, true)
    @params({ id: "group" }, true)
    @params({ id: "other" }, false)
    @params(invalid, false)
    function _(child, expected)
      m.assertEqual(m.node@.hasItem(child), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getIndex")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets index of a specific child")
    @params({ id: "label" }, 0)
    @params({ id: "poster" }, 1)
    @params({ id: "group" }, 2)
    @params({ id: "other" }, -1)
    @params(invalid, -1)
    function _(child, expected)
      m.assertEqual(m.node@.getIndex(child), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("insertItems")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't insert items that are not roSGNode")
    function _()
      child = invalid
      m.node@.insertItems(2, child)

      m.assertEqual(m.node.length, 3)
    end function

    @it("doesn't insert items if index is higher than total node's children count")
    function _()
      child = mc.createSGNode("Rectangle", invalid, "rectangle")
      m.node@.insertItems(7, child)

      m.assertEqual(m.node.length, 3)
    end function

    @it("doesn't crash if items are not arrays and inserts roSGNode items")
    function _()
      child = mc.createSGNode("Rectangle", invalid, "rectangle")

      m.node@.insertItems(1, child)

      m.assertEqual(m.node.length, 4)
      m.assertEqual(m.node@.getChild(1).id, "rectangle")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createChild")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns invalid for wrong node types and doesn't append it to nodes children")
    function _()
      child = m.node@.createChild("wrong", "newLabel")

      m.assertEqual(m.node.length, 3)
      m.assertInvalid(child)
    end function

    @it("create a node and appends it to the node children")
    function _()
      child = m.node@.createChild("Label", "newLabel")

      m.assertEqual(m.node.length, 4)
      m.assertEqual(m.node@.getChild(m.node.length - 1).id, "newLabel")
      m.assertEqual(m.node@.getChild(m.node.length - 1), child)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createChildren")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("doesn't append child if subtype is not a valid type")
    function _()
      children = m.node@.createChildren(3, "wrong")

      m.assertEqual(children, [])
      m.assertEqual(m.node.length, 3)
    end function

    @it("creates and appends a number of children")
    function _()
      children = m.node@.createChildren(2, "Label")

      m.assertEqual(children.count(), 2)
      m.assertEqual(m.node.length, 5)
      m.assertEqual(m.node@.getChild(m.node.length - 1).subType(), "Label")
      m.assertEqual(m.node@.getChild(m.node.length - 2).subType(), "Label")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getChildCount")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @fixme
    @it("returns the number of children")
    function _()
      'Doesn't work with m.node@.getChildCount()
      m.assertEqual(m.node.callFunc("getChildCount"), 3)
      m.node@.removeChildIndex(0)
      m.assertEqual(m.node.callFunc("getChildCount"), 2)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("findNode")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns invalid if node is not found")
    function _()
      m.assertInvalid(m.node@.findNode("other"))
    end function

    @it("returns node if found")
    function _()
      node = mc.createSGNode("Rectangle", invalid, "bgrect")

      m.node@.appendChild(node)
      m.assertTrue(m.node@.findNode("bgrect").isSameNode(node))
    end function
  end class
end namespace
