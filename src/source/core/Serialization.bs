import "Utils.bs"

namespace mc.utils.Serialization

  function serialize(serializable as object) as mc.types.assocarray
    if mc.utils.Serialization.isSerializable(serializable)
      if type(serializable) = "roSGNode"
        data = serializable@.serialize()
        if not mc.isAACompatible(data)
          m.log.error("Expected AssociativeArray value. Received type of " + type(data) + " instead.")
          return invalid
        end if
        data._serializationType = serializable.subType()
        data.id = serializable.id
        return data
      else
        'bs:disable-next-line
        return serializable.serialize()
      end if
    else
      m.log.error("Expected serializable value. Received type of " + type(data) + " instead.")
    end if
    return invalid
  end function

  function deSerialize(data as mc.types.assocarray, serializable = invalid as object) as dynamic
    if not mc.isAACompatible(data)
      m.log.warn("received non aa value to deserialize - cannot proceed")
      return invalid
    end if

    if serializable = invalid and mc.isAACompatible(data) and mc.isString(data._serializationType)
      serializable = mc.createSGNode(data._serializationType, invalid, data.id)
      if serializable = invalid
        m.log.error("could not deserialize type", data._serializationType)
      end if
    end if

    if mc.utils.Serialization.isSerializable(serializable)
      if type(serializable) = "roSGNode"
        serializable@.deserialize(data)
      else
        'bs:disable-next-line
        serializable.deserialize(data)
      end if
      return serializable
    else
      m.log.warn("asked to deserialize non-serializebale object")
    end if
    return invalid
  end function

  function isSerializable(item as object) as boolean
    if mc.isAACompatible(item)
      if type(item) = "roSGNode"
        return item.isSerializable = true
      else
        return item.isSerializable = true and item.serialize <> invalid and item.deserialize <> invalid
      end if
    end if
    return false
  end function

  function isDeSerializableToNode(json as mc.types.assocarray) as boolean
    return mc.isAACompatible(json) and json._serializationType <> invalid
  end function

end namespace
