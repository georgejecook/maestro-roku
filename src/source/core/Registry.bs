import "pkg:/source/roku_modules/log/LogMixin.brs"
import "Serialization.bs"

namespace mc
  class Registry

    private log = new log.Logger("Registry")
    '
    ' Read and deserialize to a native type
    public function read(sectionName as string, key as string) as dynamic
      sectionName = lcase(sectionName)
      key = lcase(key)
      section = createObject("roRegistrySection", sectionName)

      if section.exists(key)
        return parseJson(section.read(key))
      else
        return invalid
      end if
    end function

    public function write(sectionName as string, key as string, value as dynamic) as boolean
      sectionName = lcase(sectionName)
      key = lcase(key)
      section = createObject("roRegistrySection", sectionName)

      success = section.write(key, formatJson(value))
      if not success
        m.log.error("Call to roRegistrySection.write() failed.")
        return false
      end if

      success = section.flush()
      if not success
        m.log.error("Call to roRegistrySection.flush() failed.")
        return false
      end if

      return true
    end function

    public function delete(sectionName as string, key as string) as boolean
      sectionName = lcase(sectionName)
      key = lcase(key)
      section = createObject("roRegistrySection", sectionName)
      if section.exists(key)
        success = section.delete(key)
        if not success
          m.log.error(`Failed to delete key '${key}' from registry section '${sectionName}'`)
          return false
        end if
      end if

      m.log.warn(`Attempted to delete registry section ${sectionName}, but registry section does not exist.`)
      return true ' return as success even if registry doesn't exist, as this technically fulfills goal of a delete() call
    end function

    public function readAll() as object
      registry = createObject("roRegistry")
      sections = registry.getSectionList()
      data = {}

      for each sectionName in sections
        section = createObject("roRegistrySection", sectionName)
        keys = section.getKeyList()
        sectionData = {}

        for each k in keys
          sectionData[k] = parseJson(section.read(k))
        end for
        data[sectionName] = sectionData
      end for

      return data
    end function

    public function writeAll(data as object) as boolean
      success = true
      registry = createObject("roRegistry")

      if data <> invalid and type(data) = "roAssociativeArray"

        for each sectionName in data
          sectionData = data[sectionName]
          sectionName = lcase(`${sectionName}`)
          section = createObject("roRegistrySection", sectionName)

          if sectionData <> invalid and type(sectionData) = "roAssociativeArray"

            for each key in sectionData
              value = sectionData[key]
              key = lcase(`${key}`)

              if not section.write(key, formatJson(value))
                success = false ' flip success=false if there is any failure; subsequent successes do not negate failure
                if not success
                  m.log.error(`Failed to write registry data for registry section '${sectionName}', key '${key}'`)
                end if
              end if
            end for

          end if

          if not section.flush()
            success = false
            m.log.error("Call to roRegistrySection.flush() failed.")
          end if

        end for

      end if

      if not registry.flush()
        success = false
        m.log.error("Call to roRegistry.flush() failed.")
      end if

      return success
    end function

    public function deleteAll() as boolean
      success = true
      registry = createObject("roRegistry")
      sections = registry.getSectionList()

      for each sectionName in sections
        if not registry.delete(sectionName)
          success = false
          m.log.error(`Failed to delete registry section '${sectionName}'`)
        end if
      end for

      return success
    end function

    function writeSerializable(section as string, key as string, serializable as object) as boolean
      data = mc.utils.Serialization.serialize(serializable)
      if data <> invalid
        return m.write(section, key, data)
      else
        m.log.warn("asked to write from non-serializeable object")
        return false
      end if
    end function

    function readSerializable(section as string, key as string, serializable = invalid as object) as dynamic
      if mc.utils.Serialization.isSerializable(serializable) or serializable = invalid
        data = m.read(section, key)
        return mc.utils.Serialization.deSerialize(data, serializable)
      else
        m.log.warn("asked to read into non-serializeable object")
      end if
      return false
    end function
  end class
end namespace
